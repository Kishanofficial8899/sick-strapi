{"ast":null,"code":"import { mergeDeep } from \"@apollo/client/utilities\";\nimport { PAGINATION_QUERY } from \"../components/Pagination\";\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$productsConnect, _data$productsConnect2;\n\n      const {\n        limit,\n        start\n      } = args;\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$productsConnect = data.productsConnection) === null || _data$productsConnect === void 0 ? void 0 : (_data$productsConnect2 = _data$productsConnect.aggregate) === null || _data$productsConnect2 === void 0 ? void 0 : _data$productsConnect2.count;\n      const page = start / limit + 1;\n      const pages = Math.ceil(count / limit);\n      const items = existing.slice(limit, limit + start).filter(x => x);\n\n      if (items.length && page !== 1) {\n        return items;\n      }\n\n      if (items.length && items.length !== start && page === pages) {\n        return items;\n      }\n\n      if (items.length !== start) {\n        return false;\n      }\n\n      if (items.length) {\n        console.log(`There are ${items.length} items in the cache! Gonna send them to apollo`);\n        return items;\n      }\n\n      return false;\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        limit,\n        start\n      } = args;\n      console.log(limit);\n      console.log(\"existing\", existing);\n      console.log(`MErging items from the network ${incoming.length}`);\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = limit; i < limit + incoming.length; ++i) {\n        merged[i] = incoming[i - limit];\n      } // Finally we return the merged items from the cache,\n\n\n      return merged;\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/bytes-kishan/Desktop/Kishan/strapi/frontend/lib/paginationField.js"],"names":["mergeDeep","PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","limit","start","data","readQuery","query","count","productsConnection","aggregate","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAC,KADL;;AAEHC,IAAAA,IAAI,CAACC,QAAQ,GAAC,EAAV,EAAa;AAAEC,MAAAA,IAAF;AAAOC,MAAAA;AAAP,KAAb,EAA6B;AAAA;;AAC7B,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAmBH,IAAzB;AAEA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAACX;AAAR,OAAhB,CAAb;AACA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,kBAAT,oFAAG,sBAA0BC,SAA7B,2DAAG,uBAAqCF,KAAnD;AACA,YAAMG,IAAI,GAAGP,KAAK,GAAGD,KAAR,GAAgB,CAA7B;AACA,YAAMS,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUN,KAAK,GAAGL,KAAlB,CAAd;AACA,YAAMY,KAAK,GAAGf,QAAQ,CAACgB,KAAT,CAAeb,KAAf,EAAsBA,KAAK,GAAGC,KAA9B,EAAqCa,MAArC,CAA6CC,CAAD,IAAOA,CAAnD,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,IAAgBR,IAAI,KAAK,CAA7B,EAAiC;AAC7B,eAAOI,KAAP;AACH;;AACD,UAAIA,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBf,KAAjC,IAA0CO,IAAI,KAAKC,KAAvD,EAA8D;AAC1D,eAAOG,KAAP;AACH;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBf,KAArB,EAA4B;AACxB,eAAO,KAAP;AACH;;AACD,UAAIW,KAAK,CAACI,MAAV,EAAkB;AACdC,QAAAA,OAAO,CAACC,GAAR,CACK,aAAYN,KAAK,CAACI,MAAO,gDAD9B;AAGA,eAAOJ,KAAP;AACH;;AACD,aAAO,KAAP;AACH,KA1BE;;AA2BHO,IAAAA,KAAK,CAACtB,QAAD,EAAWuB,QAAX,EAAqB;AAAEtB,MAAAA;AAAF,KAArB,EAA+B;AAChC,YAAM;AAAEE,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAmBH,IAAzB;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBrB,QAAxB;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAa,kCAAiCE,QAAQ,CAACJ,MAAO,EAA9D;AACA,YAAMK,MAAM,GAAGxB,QAAQ,GAAGA,QAAQ,CAACgB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIS,CAAC,GAAGtB,KAAb,EAAoBsB,CAAC,GAAGtB,KAAK,GAAGoB,QAAQ,CAACJ,MAAzC,EAAiD,EAAEM,CAAnD,EAAsD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGtB,KAAL,CAApB;AACH,OAR+B,CAShC;;;AACA,aAAOqB,MAAP;AACH;;AAtCE,GAAP;AAwCH","sourcesContent":["import { mergeDeep } from \"@apollo/client/utilities\";\nimport { PAGINATION_QUERY } from \"../components/Pagination\";\n\nexport default function paginationField() {\n    return {\n        keyArgs:false,\n        read(existing=[],{ args,cache }) {\n            const { limit, start } = args;\n            \n            const data = cache.readQuery({ query:PAGINATION_QUERY });\n            const count = data?.productsConnection?.aggregate?.count;\n            const page = start / limit + 1;\n            const pages = Math.ceil(count / limit);\n            const items = existing.slice(limit, limit + start).filter((x) => x);\n            if (items.length && page !== 1 ) {\n                return items;\n            }\n            if (items.length && items.length !== start && page === pages) {\n                return items;\n            }\n            if (items.length !== start) {\n                return false;\n            }\n            if (items.length) {\n                console.log(\n                    `There are ${items.length} items in the cache! Gonna send them to apollo`\n                );\n                return items;\n            }\n            return false;\n        },\n        merge(existing, incoming, { args }) {\n            const { limit, start } = args;\n            console.log(limit)\n            console.log(\"existing\", existing)\n            console.log(`MErging items from the network ${incoming.length}`);\n            const merged = existing ? existing.slice(0) : [];\n            for (let i = limit; i < limit + incoming.length; ++i) {\n                merged[i] = incoming[i - limit];\n            }\n            // Finally we return the merged items from the cache,\n            return merged;\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}