{"ast":null,"code":"import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { onError } from '@apollo/link-error';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { createUploadLink } from 'apollo-upload-client';\nimport withApollo from 'next-with-apollo';\nimport { endpoint, prodEndpoint } from '../config';\n\nfunction createClient(_ref) {\n  var headers = _ref.headers,\n      initialState = _ref.initialState;\n  console.log(\">>>>>env\", \"development\");\n  return new ApolloClient({\n    link: ApolloLink.from([onError(function (_ref2) {\n      var graphQLErrors = _ref2.graphQLErrors,\n          networkError = _ref2.networkError;\n      if (graphQLErrors) graphQLErrors.forEach(function (_ref3) {\n        var message = _ref3.message,\n            locations = _ref3.locations,\n            path = _ref3.path;\n        return console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n      });\n      if (networkError) console.log(\"[Network error]: \".concat(networkError, \". Backend is unreachable. Is it running?\"));\n    }), // this uses apollo-link-http under the hood, so all the options here come from that package\n    createUploadLink({\n      uri: true ? process.env.DEVELOPMENT_URL : process.env.PRODUCTION_URL,\n      fetchOptions: {\n        credentials: 'include'\n      },\n      headers: headers\n    })]),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {// fields: {\n          //   products: paginationFiel(),\n          // },\n        }\n      }\n    }).restore(initialState || {})\n  });\n}\n\nexport default withApollo(createClient, {\n  getDataFromTree: getDataFromTree\n});","map":{"version":3,"sources":["/home/bytes-kishan/Desktop/Kishan/strapi/frontend/lib/withData.js"],"names":["ApolloClient","ApolloLink","InMemoryCache","onError","getDataFromTree","createUploadLink","withApollo","endpoint","prodEndpoint","createClient","headers","initialState","console","log","link","from","graphQLErrors","networkError","forEach","message","locations","path","uri","process","env","DEVELOPMENT_URL","PRODUCTION_URL","fetchOptions","credentials","cache","typePolicies","Query","restore"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,aAAnC,QAAwD,gBAAxD;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;;AAGA,SAASC,YAAT,OAAiD;AAAA,MAAzBC,OAAyB,QAAzBA,OAAyB;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,SAAO,IAAIb,YAAJ,CAAiB;AACtBc,IAAAA,IAAI,EAAEb,UAAU,CAACc,IAAX,CAAgB,CACpBZ,OAAO,CAAC,iBAAqC;AAAA,UAAlCa,aAAkC,SAAlCA,aAAkC;AAAA,UAAnBC,YAAmB,SAAnBA,YAAmB;AAC3C,UAAID,aAAJ,EACEA,aAAa,CAACE,OAAd,CAAsB;AAAA,YAAGC,OAAH,SAAGA,OAAH;AAAA,YAAYC,SAAZ,SAAYA,SAAZ;AAAA,YAAuBC,IAAvB,SAAuBA,IAAvB;AAAA,eACpBT,OAAO,CAACC,GAAR,qCAC+BM,OAD/B,yBACqDC,SADrD,qBACyEC,IADzE,EADoB;AAAA,OAAtB;AAKF,UAAIJ,YAAJ,EACEL,OAAO,CAACC,GAAR,4BACsBI,YADtB;AAGH,KAXM,CADa,EAapB;AACAZ,IAAAA,gBAAgB,CAAC;AACfiB,MAAAA,GAAG,EAAE,OAAyCC,OAAO,CAACC,GAAR,CAAYC,eAArD,GAAuEF,OAAO,CAACC,GAAR,CAAYE,cADzE;AAEfC,MAAAA,YAAY,EAAE;AACZC,QAAAA,WAAW,EAAE;AADD,OAFC;AAKflB,MAAAA,OAAO,EAAPA;AALe,KAAD,CAdI,CAAhB,CADgB;AAuBtBmB,IAAAA,KAAK,EAAE,IAAI3B,aAAJ,CAAkB;AACvB4B,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE,CACL;AACA;AACA;AAHK;AADK;AADS,KAAlB,EAQJC,OARI,CAQIrB,YAAY,IAAI,EARpB;AAvBe,GAAjB,CAAP;AAiCD;;AAED,eAAeL,UAAU,CAACG,YAAD,EAAe;AAAEL,EAAAA,eAAe,EAAfA;AAAF,CAAf,CAAzB","sourcesContent":["import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client';\nimport { onError } from '@apollo/link-error';\nimport { getDataFromTree } from '@apollo/client/react/ssr';\nimport { createUploadLink } from 'apollo-upload-client';\nimport withApollo from 'next-with-apollo';\nimport { endpoint, prodEndpoint } from '../config';\n\n\nfunction createClient({ headers, initialState }) {\n  console.log(\">>>>>env\", process.env.NODE_ENV)\n  return new ApolloClient({\n    link: ApolloLink.from([\n      onError(({ graphQLErrors, networkError }) => {\n        if (graphQLErrors)\n          graphQLErrors.forEach(({ message, locations, path }) =>\n            console.log(\n              `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n            )\n          );\n        if (networkError)\n          console.log(\n            `[Network error]: ${networkError}. Backend is unreachable. Is it running?`\n          );\n      }),\n      // this uses apollo-link-http under the hood, so all the options here come from that package\n      createUploadLink({\n        uri: process.env.NODE_ENV === 'development' ? process.env.DEVELOPMENT_URL : process.env.PRODUCTION_URL,\n        fetchOptions: {\n          credentials: 'include',\n        },\n        headers,\n      }),\n    ]),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          // fields: {\n          //   products: paginationFiel(),\n          // },\n        },\n      },\n    }).restore(initialState || {}),\n  });\n}\n\nexport default withApollo(createClient, { getDataFromTree });\n"]},"metadata":{},"sourceType":"module"}