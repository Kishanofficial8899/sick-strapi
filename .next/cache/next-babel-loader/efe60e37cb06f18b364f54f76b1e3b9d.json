{"ast":null,"code":"import { mergeDeep } from \"@apollo/client/utilities\";\nimport { PAGINATION_QUERY } from \"../components/Pagination\";\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    read: function read() {\n      var _data$productsConnect, _data$productsConnect2;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      var limit = args.limit,\n          start = args.start;\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$productsConnect = data.productsConnection) === null || _data$productsConnect === void 0 ? void 0 : (_data$productsConnect2 = _data$productsConnect.aggregate) === null || _data$productsConnect2 === void 0 ? void 0 : _data$productsConnect2.count;\n      var page = start / limit + 1;\n      var pages = Math.ceil(count / limit);\n      var items = existing.slice(limit, limit + start).filter(function (x) {\n        return x;\n      });\n\n      if (items.length && items.length !== start && page === pages) {\n        return items;\n      }\n\n      if (items.length !== start) {\n        return false;\n      }\n\n      if (items.length) {\n        console.log(\"There are \".concat(items.length, \" items in the cache! Gonna send them to apollo\"));\n        return items;\n      }\n\n      return false;\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var limit = args.limit,\n          start = args.start;\n      console.log(limit);\n      console.log(\"existing\", existing);\n      console.log(\"MErging items from the network \".concat(incoming.length));\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = limit; i < limit + incoming.length; ++i) {\n        merged[i] = incoming[i - limit];\n      } // Finally we return the merged items from the cache,\n\n\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["/home/bytes-kishan/Desktop/Kishan/strapi/frontend/lib/paginationField.js"],"names":["mergeDeep","PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","limit","start","data","readQuery","query","count","productsConnection","aggregate","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAO;AACHC,IAAAA,OAAO,EAAC,KADL;AAEHC,IAAAA,IAFG,kBAE8B;AAAA;;AAAA,UAA5BC,QAA4B,uEAAnB,EAAmB;;AAAA;AAAA,UAAdC,IAAc,QAAdA,IAAc;AAAA,UAATC,KAAS,QAATA,KAAS;;AAAA,UACrBC,KADqB,GACJF,IADI,CACrBE,KADqB;AAAA,UACdC,KADc,GACJH,IADI,CACdG,KADc;AAG7B,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAACX;AAAR,OAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,kBAAT,oFAAG,sBAA0BC,SAA7B,2DAAG,uBAAqCF,KAAnD;AACA,UAAMG,IAAI,GAAGP,KAAK,GAAGD,KAAR,GAAgB,CAA7B;AACA,UAAMS,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUN,KAAK,GAAGL,KAAlB,CAAd;AACA,UAAMY,KAAK,GAAGf,QAAQ,CAACgB,KAAT,CAAeb,KAAf,EAAsBA,KAAK,GAAGC,KAA9B,EAAqCa,MAArC,CAA4C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA5C,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBf,KAAjC,IAA0CO,IAAI,KAAKC,KAAvD,EAA8D;AAC1D,eAAOG,KAAP;AACH;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBf,KAArB,EAA4B;AACxB,eAAO,KAAP;AACH;;AACD,UAAIW,KAAK,CAACI,MAAV,EAAkB;AACdC,QAAAA,OAAO,CAACC,GAAR,qBACiBN,KAAK,CAACI,MADvB;AAGA,eAAOJ,KAAP;AACH;;AACD,aAAO,KAAP;AACH,KAvBE;AAwBHO,IAAAA,KAxBG,iBAwBGtB,QAxBH,EAwBauB,QAxBb,SAwBiC;AAAA,UAARtB,IAAQ,SAARA,IAAQ;AAAA,UACxBE,KADwB,GACPF,IADO,CACxBE,KADwB;AAAA,UACjBC,KADiB,GACPH,IADO,CACjBG,KADiB;AAEhCgB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBrB,QAAxB;AACAoB,MAAAA,OAAO,CAACC,GAAR,0CAA8CE,QAAQ,CAACJ,MAAvD;AACA,UAAMK,MAAM,GAAGxB,QAAQ,GAAGA,QAAQ,CAACgB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIS,CAAC,GAAGtB,KAAb,EAAoBsB,CAAC,GAAGtB,KAAK,GAAGoB,QAAQ,CAACJ,MAAzC,EAAiD,EAAEM,CAAnD,EAAsD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGtB,KAAL,CAApB;AACH,OAR+B,CAShC;;;AACA,aAAOqB,MAAP;AACH;AAnCE,GAAP;AAqCH","sourcesContent":["import { mergeDeep } from \"@apollo/client/utilities\";\nimport { PAGINATION_QUERY } from \"../components/Pagination\";\n\nexport default function paginationField() {\n    return {\n        keyArgs:false,\n        read(existing=[],{ args,cache }) {\n            const { limit, start } = args;\n            \n            const data = cache.readQuery({ query:PAGINATION_QUERY });\n            const count = data?.productsConnection?.aggregate?.count;\n            const page = start / limit + 1;\n            const pages = Math.ceil(count / limit);\n            const items = existing.slice(limit, limit + start).filter((x) => x);\n            if (items.length && items.length !== start && page === pages) {\n                return items;\n            }\n            if (items.length !== start) {\n                return false;\n            }\n            if (items.length) {\n                console.log(\n                    `There are ${items.length} items in the cache! Gonna send them to apollo`\n                );\n                return items;\n            }\n            return false;\n        },\n        merge(existing, incoming, { args }) {\n            const { limit, start } = args;\n            console.log(limit)\n            console.log(\"existing\", existing)\n            console.log(`MErging items from the network ${incoming.length}`);\n            const merged = existing ? existing.slice(0) : [];\n            for (let i = limit; i < limit + incoming.length; ++i) {\n                merged[i] = incoming[i - limit];\n            }\n            // Finally we return the merged items from the cache,\n            return merged;\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}